else if ((int)inputData["runMode"]["value"] == 3){
         const char *fileName = data/hospital.txt";
            std::map<std::string, std::vector<float>> hospitalData = readHospitalData(fileName);
            std::map<std::string, std::vector<float>> WardData;
            std::map<std::string, std::vector<float>> WardCoordinates;
            // lọc các khoa viện
            for (const auto& pair : hospitalData) {
                if(pair.first.length() < 2){
                    WardData[pair.first] = pair.second;
                }
            }
        
            WardData["A"] = {hospitalData["PosofA"][0], hospitalData["PosofA"][1], hospitalData["PosofA"][4],
             hospitalData["PosofA"][5], hospitalData["PosofA"][6] - hospitalData["PosofA"][2]};
            float walkwayWidth = 10e8;
             // tính toán tọa độ từng khoa/viện
            for (auto& ward : WardData) {
                float x1 = ward.second[0] - ward.second[4] / 2.0;
                float y1 = ward.second[1];
                float x2 = ward.second[0] + ward.second[4] / 2.0;
                float y2 = ward.second[1];
                float x3 = ward.second[0] + ward.second[4] / 2.0;
                float y3 = ward.second[3];
                float x4 = ward.second[0] - ward.second[4] / 2.0;
                float y4 = ward.second[3];
                if(walkwayWidth > x1){
                    walkwayWidth = x1;
                }
                WardCoordinates[ward.first] = {x1, y1, x2, y2, x3, y3, x4, y4};
            }
            // tìm các Junction
            map<string, vector<float>> junctions;
            map<string, float> hallways;
            for (auto& ward : WardCoordinates) {
                float x1 = ward.second[0] - walkwayWidth;
                float y1 = ward.second[1] - walkwayWidth;
                float x2 = ward.second[2];
                float y2 = ward.second[3] - walkwayWidth;
                float x3 = ward.second[4];
                float y3 = ward.second[5];
                float x4 = ward.second[6] - walkwayWidth;
                float y4 = ward.second[7];
                addWard(junctions, x1, y1);
                addWard(junctions, x2, y2);
                addWard(junctions, x3, y3);
                addWard(junctions, x4, y4);
            }
        
            calculateDistances(junctions, hallways, WardCoordinates, walkwayWidth);
        //-----------------------------------------------------------------------------------//
            std::string input1;
            do{
                cout << "Select the type of traffic you want to simulate" << endl;
                cout << "1. Hallway" << endl;
                cout << "2. Junction" << endl;
                cout << "Your choice: ";
                getline(cin, input1);
                if (input1 == "1")
                {
                    do
                    {
                        cout << "Please enter the hallway you want to emulate" ;
                        cout << "(from H0 to H" << hallways.size() - 1 << ")" << endl;
                        cout << "(Press enter to randomly select a hallway in the map)" << endl;
                        cout << "Your choice: ";
                        getline(cin, hallName);
                        if (hallName == "")
                        {
                            auto it = hallways.begin();
                            std::advance(it, randomInt(0, hallways.size() - 1));
                            std::string random_key = it->first;
                            hallName.assign(random_key);
                        }
        
                    } while (hallways.count(hallName) == 0);
                    cout << hallName << " : " << endl;
                    float length1Side = (float)hallways[hallName] / 2;
                    juncData = {length1Side, length1Side};
                }
                else if (input1 == "2")
                {
                    do
                    {
                        cout << "Please enter the junction you want to emulate";
                        cout << "(from J0 to J" << junctions.size() - 1 << ")" << endl;
                        cout << "(Press enter to randomly select a junction in the map)" << endl;
                        cout << "Your choice: ";
                        getline(cin, juncName);
                        if (juncName == "")
                        {
                            auto it = junctions.begin();
                            std::advance(it, randomInt(0, junctions.size() - 1));
                            std::string random_key = it->first;
                            juncName.assign(random_key);
                        }
        
                    } while (junctions[juncName].size() < 4);
                    cout << juncName << " : " << endl;            
                    juncData = {junctions[juncName][3], junctions[juncName][4], junctions[juncName][5], junctions[juncName][6]};
                    juncDataList = convertJuncData(junctions);
                }
            } while (input1 != "1" && input1 != "2"); 
 
    }
/*cout << "walkwayWidth: " << walkwayWidth << endl;  
    cout << "juncData: ";
    for (const float &data : juncData)
    {
        cout << data << " ";
    }
    cout << endl;
    cout << "juncDataList: " << endl;
    int count = 0;
    for (const auto &pair : juncDataList)
    {
        cout << pair.first << ": " << pair.second;
        if(count == 7){
            cout << endl;
            count = 0;
        } else {
            cout << "  ";
            count++;
        }
    }*/
